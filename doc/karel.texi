\input texinfo   @c -*-texinfo-*-

@set UPDATED 25 July 2000
@set EDITION 0.4.0
@set VERSION 0.4

@c %**start of header
@c @smallbook
@setfilename karel.info
@settitle Karel the Robot
@syncodeindex fn cp
@c %**end of header

@setchapternewpage odd

@ifinfo
@c !! set edition, date, version
This is Edition @value{EDITION}, @value{UPDATED},
of the @cite{Karel Manual} for karel Version @value{VERSION}

This file documents Karel, a robot simulator/interpreter.

Copyright (C) 2000 Tom Mitchell

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.

@end ifinfo

@titlepage
@title Karel
@subtitle A Robot Interpreter
@subtitle Edition @value{EDITION}, for karel version @value{VERSION}
@subtitle @value{UPDATED}
@author Tom Mitchell
@author tmitchel@@users.sourceforge.net

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000 Tom Mitchell

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end titlepage

@node    Top, Introduction, (dir), (dir)
@comment node-name, next,          previous, up

@ifinfo
This is Edition @value{VERSION}, @value{UPDATED},
of the @cite{Karel Manual} for karel Version @value{VERSION}
@end ifinfo

@menu
* Introduction::                About Karel

* Karel Users Guide::           
* Karel Programmers Guide::     
* Index::                       
@end menu

@node    Introduction, Karel Users Guide, Top, Top
@comment node-name,     next,          previous, up
@chapter Introduction

@menu
* Learning to Program::         
* Karel::                       
* How to use this manual::      
* Acknowledgements::            
@end menu

@node Learning to Program, Karel, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Learning to Program

My first college computer class, in the fall of 1982, used
@cite{Karel the Robot} as the introduction to programming in Pascal.  I
found it an entertaining and useful introduction to structured
programming.  While structured programming has fallen out of favor in
deference to object oriented programming, I still think this can be a
useful introduction to computer programming.  And I think that children
are entertained by the idea of instructing a robot to perform a task,
and then watching the robot actually follow the instructions.

@node Karel, How to use this manual, Learning to Program, Introduction
@section Karel

This document is light on the details of the Karel language.  The
definitive reference is Richard Pattis' @cite{Karel The Robot: A Gentle
Introduction to The Art of Programming}@footnote{Pattis, Richard E., Jim
Roberts, and Mark Stehlik. @cite{Karel the Robot: A Gentle Introduction
to The Art of Programming}. New York: Wiley, 1995.  ISBN:
0471597252}.  What this document attempts to describe is the Karel
simulator, which loads and executes Karel programs.

There are three user interfaces that come with the Karel package: text,
curses, and gtk.  The text interface prints out a line whenever Karel
moves or turns.  This is useful for debugging and regression testing,
but not very useful to a user.  The curses interface allows users to run
Karel programs on a terminal, no windowing system required.  The gtk
interface can be used on systems that have the X Window system and the
GTK development headers and libraries.

The architecture of the Karel package is such that developers can build
their own user interfaces using virtually any toolkit they desire.  All
they need is a C interface to interact with the Karel engine.  Karel was
written this way to avoid being tied to any particular GUI toolkit.  The
choice of GUI toolkits is largely personal preference; I set the goal of
being relatively toolkit independent.  I expect it to be possible to
build user interfaces to the Karel environment in Qt, Motif/Lesstif,
Athena, Tcl/Tk, Java, perl, guile, or any other system that has a C
callout mechanism.

@node How to use this manual, Acknowledgements, Karel, Introduction
@section How to use this manual

This manual is divided into 2 sections, a User's Guide and a
Programmer's Guide.  If you want to write Karel programs and run them,
you'll want to read the User's Guide.  If you want to extend the Karel
environment, or you are curious about the inner workings of the
environment, you will find the Programmer's Guide helpful.

@node Acknowledgements,  , How to use this manual, Introduction
@comment  node-name,  next,  previous,  up
@section Acknowledgements
@cindex Miksovsky, Jan
@cindex Pattis, Richard

Thanks go to Richard Pattis wrote @cite{Karel the Robot}, upon which
this program is based.  Richard was kind to give me his permission to
distribute this simulator.  Without his book, this program could never
have been written.

Thanks also go to Jan Miksovsky, who wrote a Karel simulator in the mid
1980's.  I found that program in early 2000, dusted it off, and it ran.
I then modified the program to be more modular, and object-oriented (as
much as one can in C).  I was able to locate Jan on the internet (it
pays to have a unique last name, I guess) and he was gracious enough to
give me his permission to modify his original work and distribute it.
Not much remains of Jan's code, but the concepts behind the simulator,
and particularly the engine that builds and executes a Karel program,
are Jan's, and I probably couldn't have written this system without his
lead to follow.

Don Dietrick and Bill Mackiewicz both served as early beta testers.  I
am indebted to them for their patience in dealing with a half-baked glob
of software, and sparse documentation.  They dutifully did the
compile-make-repeat loop in order to test out the latest I had to offer.



@c ----------------------------------------------------------------------
@c
@c User's Guide
@c
@c ----------------------------------------------------------------------

@node Karel Users Guide, Karel Programmers Guide, Introduction, Top
@chapter Karel User's Guide

@menu
* Invoking::                    
* Defining a world::            
* Writing Karel Programs::      
* Karel Language Reference::    
@end menu

@node Invoking, Defining a world, Karel Users Guide, Karel Users Guide
@section Invoking the Karel Simulator

@menu
* Curses Interface::            
* X Interface::                 
@end menu

A Karel simulator is a program that ties the Karel execution engine to a
user interface.  The execution engine is responsible for running the
karel program and moving Karel around his world.  The user interface is
responsible for displaying the state of the world and the robot to the
user.  The karel distribution comes with two such simulators: a terminal
based interface and an X Window System based interface.

@node Curses Interface, X Interface, Invoking, Invoking
@subsection Invoking in a terminal

@code{karelc} is a simulator written with the curses user interface.  To
run the samples/maze.k Karel program in the @code{karelc} simulator:

@code{curses/karelc -p samples/maze.k -w samples/maze1.wld}

@node X Interface,  , Curses Interface, Invoking
@subsection Invoking under X Windows

@code{karelg} is a simulator written with an X Window System GTK user
interface.  To run the samples/maze.k Karel program in the @code{karelg}
simulator:

@code{gtk/karelg -p samples/maze.k -w samples/maze1.wld}

The X Window System front end is based on the Gimp ToolKit.  The choice
of X toolkits is largely personal preference.  GTK was chosen because of
its LGPL license.  The core of the Karel Simulator, the execution
engine, is independent of any user interface.  It should be easy to
create a new user interface for Karel with a different X toolkit.  This
was one of the goals for the Karel Architecture.

@node Defining a world, Writing Karel Programs, Invoking, Karel Users Guide
@section Defining Karel's World

@menu
* World overview::              
* World general rules::         
* World reference::             
* World example::               
@end menu

@node World overview, World general rules, Defining a world, Defining a world
@subsection Overview
Karel's world has intersections, walls, and beepers.  The programs the
Karel executes are independent of the world he moves around in.  You can
execute the same program in multiple worlds, or multiple programs in the
same world.

Karel's world is defined in a file which is loaded by a Karel
simulator.  The world file is a simple text file containing commands
that define the size of the world, the position of walls and beepers,
and Karel's starting position.

@node World general rules, World reference, World overview, Defining a world
@subsection General Rules

Each line in the file describes a part of Karel's world.  We'll look at
each in turn, but first there are some general rules for the world
file.

@itemize @bullet
@item The commands are not case sensitive.  WORLD, World, and world are
equivalent.
@item Karel's world is made up of Avenues and Streets.  These correspond
to Cartesian X and Y coordinates respectively.  Avenues are vertical
lines, increasing to the right.  Streets are horizontal lines increasing
to the north.  In the world file, coordinates are always described as
avenues then street just as in geometry, where coordinates are described
as x, y.
@item Directions are defined as follows:
@itemize @minus
@item North == 1
@item East  == 2
@item South == 3
@item West  == 4
@end itemize
@end itemize


@node World reference, World example, World general rules, Defining a world
@subsection Reference

@example
World @var{num_streets} @var{num_avenues}
World 5 5
@end example
The World command defines a world that is 5 avenues wide by 5 streets
high.  

@example
Beepers @var{street} @var{avenue} @var{number}
Beepers 3 3 1
@end example
The beeper command places a number of beepers on an intersection.  In
this case, one beeper would be placed on the intersection @{3, 3@}

@example
Robot @var{street} @var{avenue} @var{direction} @var{num_beepers}
Robot 4 3 1 0
@end example
The robot starting position is defined with the Robot command.  In this
example, the robot starts at @{4, 3@}, facing North (1), with zero
beepers in his beeper bag.

@example
Wall @var{street} @var{avenue} @var{direction}
Wall 2 2 1
@end example
The Wall command places a wall section in Karel's world.  Each wall
section is one block long.  Walls can either be north or west of an
intersection (1 or 4 respectively).  In this example, a horizontal wall
is placed directly north of the intersection @{2, 2@}.

@node World example,  , World reference, Defining a world
@subsection Example
Here is a sample world file:

@example
@cartouche
World 5 5
Beepers 3 3 1
Robot 4 3 1 0
Wall 2 2 1
Wall 3 2 1
Wall 1 1 4
Wall 2 1 4
Wall 2 2 4
Wall 3 1 4
Wall 3 2 4
Wall 3 3 4
Wall 4 1 4
Wall 4 2 4
Wall 4 3 4
Wall 4 4 4
@end cartouche
@end example

The resulting world, in the curses interface, looks like this:

@example
@cartouche
  - - - - -
 |+ + + + +|

 |+ + + +|+|

 |+ + *|+|+|
    - -
 |+ +|+|+|+|

 |+|+|+|+|+|
 ----------
@end cartouche
@end example

@node Writing Karel Programs, Karel Language Reference, Defining a world, Karel Users Guide
@section Writing Karel Programs

@menu
* A Simple Program::            
* Sample Program 2::            
* Turning Right::               
* Maze Program::                
@end menu

The definitive source of Karel information is Richard Pattis' book
@cite{Karel the Robot: A Gentle Introduction to The Art of Programming}.
This section is intended to be a brief overview of the language in order
to get started using Karel.

@node A Simple Program, Sample Program 2, Writing Karel Programs, Writing Karel Programs
@subsection A Simple Program

This is the simplest correct Karel program.  All valid Karel programs
must minimally have these 5 lines.

@example
@cartouche
BEGINNING-OF-PROGRAM
  BEGINNING-OF-EXECUTION
    turnoff
  END-OF-EXECUTION
END-OF-PROGRAM
@end cartouche
@end example

This program does nothing but turn Karel off.  It is a good sample
because it concisely shows the structure of a valid Karel program.

@node Sample Program 2, Turning Right, A Simple Program, Writing Karel Programs
@subsection Sample Karel Program 2

By adding calls to the @code{move} and @code{turnleft} primitives, this
program causes Karel to walk a square, returning to his starting point.
Note that in this version of Karel, the
@cindex @{ comment character
@cindex @} comment character
'@{' and '@}' are used for comments, just like Pascal.

@example
@cartouche
@r{@{ A simple karel program to walk in a square to the left @}}

BEGINNING-OF-PROGRAM
  BEGINNING-OF-EXECUTION
    move;
    turnleft;
    move;
    turnleft;
    move;
    turnleft;
    move;
    turnleft;
    turnoff
  END-OF-EXECUTION
END-OF-PROGRAM
@end cartouche
@end example

@node Turning Right, Maze Program, Sample Program 2, Writing Karel Programs
@subsection Turning Right

The Karel language has a @code{turnleft} primitive, but lacks a
@code{turnright} primitive.  One of the first instructions a new Karel
programmer does is define the @code{turnright} instruction for Karel.
As the old adage goes, "two wrongs don't make a right, but three lefts
do".

The following example demonstrates how to define a new instruction for
Karel out of the existing primitives.  This example will cause Karel to
walk in a square to the right, instead of the left as in the previous
example.

@example
@cartouche
@r{@{ A simple karel program to walk in a square to the right @}}

BEGINNING-OF-PROGRAM

  DEFINE-NEW-INSTRUCTION turnright AS
    ITERATE 3 TIMES
      turnleft;

  BEGINNING-OF-EXECUTION
    move;
    turnright;
    move;
    turnright;
    move;
    turnright;
    move;
    turnright;
    turnoff
  END-OF-EXECUTION

END-OF-PROGRAM
@end cartouche
@end example

@node Maze Program,  , Turning Right, Writing Karel Programs
@subsection Solving a Maze

Programs can be constructed for Karel that will allow him to find a
beeper by navigating through a maze.  This sample program has Karel
follow walls looking for openings until he locates a beeper.  You can
find this program in the distribution in file @file{samples/maze.k}.

@example
@cartouche
@r{@{ karel follows the right wall until a beeper is found@}}

BEGINNING-OF-PROGRAM
  DEFINE-NEW-INSTRUCTION turnright AS
    ITERATE 3 TIMES
      turnleft;

  BEGINNING-OF-EXECUTION
    WHILE not-next-to-a-beeper DO
      BEGIN
        IF right-is-clear
          THEN turnright
          ELSE
            WHILE front-is-blocked DO
              turnleft;
        move
      END;
    turnoff
  END-OF-EXECUTION
END-OF-PROGRAM
@end cartouche
@end example

@node Karel Language Reference,  , Writing Karel Programs, Karel Users Guide
@section Karel Language Reference

@menu
* Primitives::                  
* Tests::                       
* Control Structures::          
* Defining Procedures::         
@end menu

@node Primitives, Tests, Karel Language Reference, Karel Language Reference
@subsection Primitives

@deffn Built-in move
Move Karel one intersection forward.
@end deffn

@deffn Built-in turnleft
Pivots Karel 90 degrees left.
@end deffn

@deffn Built-in pickbeeper
Take a beeper from the current intersection and put it in the beeper bag.
@end deffn

@deffn Built-in putbeeper
Take a beeper from the beeper bag and put it at the current intersection.
@end deffn

@deffn Built-in turnoff
Turn Karel off.
@end deffn

@node Tests, Control Structures, Primitives, Karel Language Reference
@subsection Tests

@deffn Test front-is-clear
True if there is no wall directly in front of Karel.  False if there is.
@end deffn

@deffn Test front-is-blocked
True if there is a wall directly in front of Karel.  False otherwise.
@end deffn

@deffn Test left-is-clear
True if there is no wall immediately to Karel's left.  False if there is.
@end deffn

@deffn Test left-is-blocked
True if there is a wall immediately to Karel's left.  False otherwise.
@end deffn

@deffn Test right-is-clear
True if there is no wall immediately to Karel's right.  False if there is.
@end deffn

@deffn Test right-is-blocked
True if there is a wall immediately to Karel's right.  False otherwise.
@end deffn

@deffn Test next-to-a-beeper
True if Karel is standing at an intersection that has a beeper.  False
otherwise.
@end deffn

@deffn Test not-next-to-a-beeper
True if there is not beeper at the current intersection.  False if there
is a beeper at the current intersection.
@end deffn

@deffn Test facing-north
True if Karel is facing north.  False otherwise.
@end deffn

@deffn Test not-facing-north
True if Karel is not facing north.  False if he is facing north.
@end deffn

@deffn Test facing-south
True if Karel is facing south.  False otherwise.
@end deffn

@deffn Test not-facing-south
True if Karel is not facing south.  False if he is facing south.
@end deffn

@deffn Test facing-east
True if Karel is facing east.  False otherwise.
@end deffn

@deffn Test not-facing-east
True if Karel is not facing east.  False if he is facing east.
@end deffn

@deffn Test facing-west
True if Karel is facing west.  False otherwise.
@end deffn

@deffn Test not-facing-west
True if Karel is not facing west.  False if he is facing west.
@end deffn

@deffn Test any-beepers-in-beeper-bag
True if there is at least one beeper in Karel's beeper bag.  False if
the beeper bag is empty.
@end deffn

@deffn Test no-beepers-in-beeper-bag
True if Karel's beeper bag is empty.  False if there is at least one
beeper in the beeper bag.
@end deffn

@node Control Structures, Defining Procedures, Tests, Karel Language Reference
@subsection Control Structures

@example
@group
BEGINNING-OF-PROGRAM
  <definitions>
    BEGINNING-OF-EXECUTION
      <stmt>;
      <stmt>;
      <stmt>;
      ...
    END-OF-EXECUTION
END-OF-PROGRAM
@end group
@end example


@example
@group
  BEGIN
    <stmt>;
    <stmt>;
    <stmt>;
    ...
  END;

  IF <test>
    THEN <stmt>
    [ ELSE <stmt> ]

  ITERATE <positive-integer> TIMES
    <stmt>

  WHILE <test> DO
    <stmt>
@end group
@end example


@node Defining Procedures,  , Control Structures, Karel Language Reference
@subsection Defining Procedures

@example
@group
  DEFINE-NEW-INSTRUCTION <name> AS
    <stmt>
@end group
@end example

@c ----------------------------------------------------------------------
@c
@c Programmer's Guide
@c
@c ----------------------------------------------------------------------

@node Karel Programmers Guide, Index, Karel Users Guide, Top
@chapter Karel Programmer's Guide

@menu
* Architecture::                
* Building applications::       
* Extending Karel::             
* API::                         
@end menu

@node Architecture, Building applications, Karel Programmers Guide, Karel Programmers Guide
@section The Karel Simulator Architecture

@node Building applications, Extending Karel, Architecture, Karel Programmers Guide
@section Building applications

@node Extending Karel, API, Building applications, Karel Programmers Guide
@section Extending Karel

@node API,  , Extending Karel, Karel Programmers Guide
@section API Reference

@menu
* Error API::                   
* Memory API::                  
* Robot API::                   
* World API::                   
* Engine API::                  
@end menu

@node Error API, Memory API, API, API
@subsection Error API

You can override the default error handling routines by defining
replacements and including them in the link command prior to libkarel.
Each error handler is defined separately, so it is possible to redefine
one, and use the default behavior of the other two.

@deftypefn {Error Handler} void ktr_err_nomem (size_t @var{size})
Library function that is invoked when the Karel engine cannot allocate
memory.
@end deftypefn

@deftypefn {Error Handler} void ktr_err_fatal (char * @var{format}, @var{...})
Library function that is invoked when the Karel engine has a fatal
error.  The default implementation prints the arguments ala
@code{fprintf(stderr}, @var{format}, @var{...}@code{)} and exits the
program.
@end deftypefn

@deftypefn {Error Handler} void ktr_err_parse (char * @var{format}, @var{...})
Library function that is invoked when the Karel parser has an error.
The default implementation prints the arguments ala
@code{fprintf(stderr}, @var{format}, @var{...}@code{)} and exits the
program.
@end deftypefn

@node Memory API, Robot API, Error API, API
@subsection Memory API

You can override the default memory management routines by defining
replacements and including them in the link command prior to libkarel.
If you do decide to override the memory management routines, they must
all be redefined.  It is not possible to redefine some memory management
routines and not others.

The default implementation uses the standard C library calls
@code{calloc}, @code{malloc}, @code{free}, and @code{realloc}.

@deftypefn {Memory Management} {void *} ktr_calloc (size_t @var{nmemb}, size_t @var{size})
Allocates an array of @var{nmemb} elements, each of @var{size} bytes.
Returns a pointer to the allocated memory, or NULL if the allocation failed.
@end deftypefn

@deftypefn {Memory Management} {void *} ktr_malloc (size_t @var{size})
Allocates @var{size} bytes.  Returns a pointer to the allocated memory,
or NULL if the allocaiton failed. 
@end deftypefn

@deftypefn {Memory Management} void ktr_free (void *@var{ptr});
Frees memory previously allocated by @code{ktr_calloc}, @code{ktr_malloc},
or @code{ktr_realloc}.
@end deftypefn

@deftypefn {Memory Management} {void *} ktr_realloc (void *@var{ptr}, size_t @var{size});
Attempts to resize the memory block pointed to by @var{ptr}.  If
@var{ptr} is NULL, the call is equivalent to
@code{malloc(}@var{size}@code{)}.  If @var{size} is equal to zero, the
call is equivalent to @code{free(}@var{ptr}@code{)}.  Unless @var{ptr}
is NULL, it must have been allocated by a previous call to
@code{ktr_calloc} or @code{ktr_malloc}.  Returns a pointer to the new
block of memory.  If the allocation fails, NULL is returned and the
original block of memory is untouched.
@end deftypefn

@node Robot API, World API, Memory API, API
@subsection Robot API

@deftp Robot ktr_robot_t
The robot data type.
@end deftp

@deftypefn Robot {ktr_robot_t *} ktr_robot_create (ktr_world_t *@var{world}, int @var{street}, int @var{avenue}, ktr_direction_t @var{dir}, int @var{n_beepers})
Creates a new robot that lives in @var{world}.  The starting position is
given as (@var{street}, @var{avenue}), facing direction @var{dir}.  The
robot starts with @var{n_beepers} in his beeper bag.
@end deftypefn

@deftypefn Robot {void} ktr_robot_set_move_callback (ktr_robot_t *@var{r}, ktr_robot_move_callback_t @var{cb})
Establishes the function to invoke whenever karel moves.
@end deftypefn

@deftypefn Robot {void} ktr_robot_set_turn_callback (ktr_robot_t *@var{r}, ktr_robot_turn_callback_t @var{cb})
Establishes the function to invoke whenever karel turns.
@end deftypefn

@deftypefn Robot {void} ktr_robot_get_pos (ktr_robot_t *@var{r}, int *@var{street}, int *@var{avenue});
Sets @var{street} and @var{avenue} to the coordinates of the given
robot's (@var{r}) current intersection.
@end deftypefn

@deftypefn Robot {char *} ktr_robot_dir_to_string (ktr_direction_t @var{dir});
Converts the given direction (@var{dir}) to a string for printing the
robot's current direction.
@end deftypefn

@node World API, Engine API, Robot API, API
@subsection World API

@deftp World ktr_world_t
The world data type.
@end deftp

@deftypefn World {ktr_world_t *} ktr_world_create (int @var{n_streets}, int @var{n_avenues})
Creates a new world of size @var{n_streets} by @var{n_avenues}.
@end deftypefn

@deftypefn World {ktr_world_t *} ktr_world_read (FILE *@var{in_file})
Reads a world description from the open file @var{in_file}.  The file
should be opened with a call to @code{fopen()}.  Returns a newly
allocated world matching the description found in the file, or NULL if
there is an error reading the file.
@end deftypefn

@deftypefn World void ktr_world_add_ew_wall (ktr_world_t *@var{w}, int @var{north_of_street}, int @var{at_avenue}, int @var{length_to_east})
Adds an east-west wall immediately north of @var{north_of_street},
starting at @var{at_avenue}, and extending @var{length_to_east} blocks
to the east.
@end deftypefn

@deftypefn World void ktr_world_add_ns_wall (ktr_world_t *@var{w}, int @var{at_street}, int @var{east_of_avenue}, int @var{length_to_north})
Adds a north-south wall immediately east of @var{east_of_avenue},
starting at @var{at_street}, and extending @var{length_to_north} blocks
to the north.
@end deftypefn

@deftypefn World int ktr_world_check_ew_wall (ktr_world_t *@var{w}, int @var{north_of_street}, int @var{at_avenue})
Returns 1 if there is an east-west wall immediately north of street
@var{north_of_street} at avenue @var{at_avenue}.  Returns 0 otherwise.
@end deftypefn

@deftypefn World int ktr_world_check_ns_wall (ktr_world_t *@var{w}, int @var{at_street}, int @var{east_of_avenue})
Returns 1 if there is an north-south wall immediately east of avenue
@var{east_of_avenue} at street @var{at_street}.  Returns 0 otherwise.
@end deftypefn

@deftypefn World int ktr_world_check_beeper (ktr_world_t *@var{w}, int @var{street}, int @var{avenue})
Returns 1 if there is a beeper at intersection
(@var{street},@var{avenue}).  Returns 0 otherwise.
@end deftypefn

@deftypefn World int ktr_world_pick_beeper (ktr_world_t *@var{w}, int @var{street}, int @var{avenue})
Decrements the number of beepers at intersection
(@var{street},@var{avenue}).  Returns 0 if a beeper was successfully
picked.  Returns -1 if there were no beepers to pick up.
@end deftypefn

@deftypefn World int ktr_world_put_beeper (ktr_world_t *@var{w}, int @var{street}, int @var{avenue})
Increments the number of beepers at intersection
(@var{street},@var{avenue}).  Returns 0.
@end deftypefn

@node Engine API,  , World API, API
@subsection Engine API

@deftypefn Engine {ktr_engine_t *} ktr_load_program (FILE *@var{in_file});
Loads the karel program in the open file @var{in_file}.  The file should
be opened with a call to @code{fopen()}.  Returns the resulting engine.
Errors are presently undetected.  This obviously needs work!
@end deftypefn

@c ----------------------------------------------------------------------
@c
@c Index
@c
@c ----------------------------------------------------------------------

@c @node    Function Index, Concept Index, Extending Karel, Top
@c @comment node-name,    next,  previous,      up
@c @unnumbered Function Index
@c @printindex fn

@node    Index,  , Karel Programmers Guide, Top
@comment node-name,    next,  previous,      up
@unnumbered Index

@printindex cp

@contents
@bye

